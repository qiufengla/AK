/*
题目描述
某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：
虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。
某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。
输入n个导弹依次飞来的高度（雷达给出的高度数据是不大于30000的正整数），计算如果要拦截所有导弹最少要配备多少套这种导弹拦截系统。
比如：有8颗导弹，飞来的高度分别为
389  207  175  300  299  170  158  165      
那么需要2个系统来拦截，他们能够拦截的导弹最优解分别是：
系统1：拦截 389  207 175 170 158
系统2：拦截 300  299 165
输入
两行，第一行表示飞来导弹的数量n（n<=1000）
第二行表示n颗依次飞来的导弹高度（导弹高度互不相等）
输出
第一行输出：要拦截所有导弹最小配备的系统数k
接下来k行分别输出每套系统拦截哪些高度的导弹
样例输入 Copy
8
389  207  175  300  299  170  158  165   
样例输出 Copy
2
1:389 207 175 170 158
2:300 299 165
*/
#include<bits/stdc++.h> 
using namespace std;
int main(){
    //一、分析问题
    //已知：n 个导弹依次飞来的高度;
    //未知：如果要拦截所有导弹最少要配备多少套这种导弹拦截系统;
    //关系：第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。
 
     
    //二、数据定义 
    int n,a[1010]={},c=0,sum,temp;
    bool isFind=false;
    vector< vector<int> > v;
 
    //三、数据输入
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>a[i];        
    } 
    //四、数据计算 
    while(!isFind){
        temp=INT_MAX;
        if(c == v.size()) v.push_back(vector<int>());
        sum=0;
        for(int i=0;i<n;i++){
            if(a[i]==0) continue;
            sum+=a[i];
            if(temp>a[i]){
                temp=a[i];
                v[c].push_back(a[i]);
                a[i]=0;
            }
        }
 
        if(0==sum){
            isFind=true;
        }else{
            ++c;
        }
    }
 
 
    //五、输出结果
    cout<<c<<endl; 
    for(int i=0;i<c;i++){
        cout<<i+1<<":";
        for(int j=0;j<v[i].size();j++){
            cout<<v[i][j];
            if(j!=v[i].size()-1) cout<<" ";
        }
        cout<<endl;
    }
    return 0;   
}
 
 
/**************************************************************
    Problem: 23840
    User: 2024JK070430
    Language: C++
    Result: 正确
    Time:1 ms
    Memory:2220 kb
****************************************************************/